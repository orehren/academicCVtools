% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_cv_sheets.R
\name{load_cv_sheets}
\alias{load_cv_sheets}
\title{Load multiple sheets from a Google Sheet into a named list}
\usage{
load_cv_sheets(doc_identifier, sheets_to_load, ...)
}
\arguments{
\item{doc_identifier}{The ID, URL, or name of the Google Sheets document.
Must be a single, non-empty string. Passed to \code{read_cv_sheet}.}

\item{sheets_to_load}{A named list or character vector defining which sheets
to load and how to name the results in the output list.
- If \strong{named list/vector}: Names must be the sheet names (tabs) to read
(e.g., \code{"Working Experiences"}), and values must be the desired
character names for the corresponding list elements in the output
(e.g., \code{"work_exp"}). Example: \code{list("Working Experiences" = "work_exp")}.
Names and values must be non-empty strings.
- If \strong{unnamed character vector}: A vector of sheet names (tabs) to read
(e.g., \code{c("Working Experiences", "Education")}). The names of the
returned list elements will be automatically generated by cleaning
the sheet names (using \code{janitor::make_clean_names}). Sheet names
must be non-empty strings.}

\item{...}{Additional arguments to be passed down to \code{read_cv_sheet} for
every sheet being read (e.g., \code{na_strings}, \code{col_types}).}
}
\value{
A named list where each element is a \code{tibble} containing the data
from a requested sheet. The names of the list elements are determined
as described for \code{sheets_to_load}.
}
\description{
This function reads data from multiple specified sheets of a single Google
Sheet document and returns them as tibbles within a named list. It validates
arguments before proceeding using assertions from the \code{checkmate} package via
an internal helper function.
}
\examples{
\dontrun{
# Requires authentication beforehand, e.g., via gs4_auth() / drive_auth()
# doc_id <- "YOUR_SHEET_ID_OR_URL_OR_NAME" # Replace with your identifier

# --- Example 1: Using a named list for sheets_to_load ---
my_cv_sheets_named <- list(
  "Working Experiences" = "work_experience", # Sheet name -> desired list name
  "Education" = "education_history",
  "Skills" = "skills_data" # Assuming these sheets exist
)
try(
  {
    cv_data_named <- load_cv_sheets(
      doc_identifier = doc_id,
      sheets_to_load = my_cv_sheets_named
    )
    # Access data via assigned names:
    print(names(cv_data_named))
    # print(head(cv_data_named$work_experience))
    # print(head(cv_data_named$education_history))
  },
  silent = TRUE
)

# --- Example 2: Using an unnamed vector for sheets_to_load ---
# Assumes janitor package is installed
my_cv_sheets_unnamed <- c("Working Experiences", "Education", "Skills & Awards")
# Note: "Skills & Awards" will become "skills_awards"
try(
  {
    cv_data_unnamed <- load_cv_sheets(
      doc_identifier = doc_id,
      sheets_to_load = my_cv_sheets_unnamed
    )
    # Access data via cleaned names:
    print(names(cv_data_unnamed))
    # print(head(cv_data_unnamed$working_experiences))
    # print(head(cv_data_unnamed$education))
    # print(head(cv_data_unnamed$skills_awards))
  },
  silent = TRUE
)

# --- Example 3: Passing extra arguments to read_cv_sheet ---
try(
  {
    cv_data_char <- load_cv_sheets(
      doc_identifier = doc_id,
      sheets_to_load = my_cv_sheets_unnamed, # Use unnamed list from above
      col_types = "c" # Read all as character for all sheets loaded
    )
    # Verify column types in one of the tibbles
    # print(lapply(cv_data_char$working_experiences, class))
  },
  silent = TRUE
)

# --- Example 4: Invalid sheets_to_load (should error via checkmate) ---
invalid_sheets_config <- list(
  "Work" = "work_df",
  Experience = 123 # Invalid type
)
try(
  {
    load_cv_sheets(doc_identifier = doc_id, sheets_to_load = invalid_sheets_config)
  },
  error = function(e) {
    print(paste("Successfully caught expected error:", e$message))
  }
)
}
}
