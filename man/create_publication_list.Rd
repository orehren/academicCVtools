% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_publication_list.R
\name{create_publication_list}
\alias{create_publication_list}
\title{Create a grouped, sorted, and formatted publication list for Typst}
\usage{
create_publication_list(
  bib_file,
  author_name,
  csl_file,
  group_labels = c(article = "Journal Article", inproceedings = "Conference Paper",
    incollection = "Book Chapter", book = "Book", phdthesis = "PhD Thesis", mastersthesis
    = "Masters Thesis", techreport = "Technical Report", unpublished = "In Preparation",
    misc = "Miscellaneous"),
  default_label = "Other",
  group_order = NULL,
  pandoc_path = NULL,
  author_highlight_markup = "#strong[\%s]",
  typst_func_name = "publication-list"
)
}
\arguments{
\item{bib_file}{Path to the .bib file. Must be a single, non-empty string
pointing to an existing, readable \code{.bib} file.}

\item{author_name}{Name of the author to highlight within the formatted
publication strings. Must be a single, non-empty string.}

\item{csl_file}{Path to the .csl file. Must be a single, non-empty string
pointing to an existing, readable \code{.csl} file.}

\item{group_labels}{Named list or named character vector mapping lowercase
BibTeX entry types (e.g., "article", "inproceedings") to the desired
display labels (e.g., "Journal Article", "Conference Paper").
Both names (BibTeX types) and values (display labels) must be
single, non-empty strings, and names must be unique.
Defaults to a standard set of mappings.}

\item{default_label}{Label to use for BibTeX types not found in \code{group_labels}.
Must be a single, non-empty string. Defaults to \code{"Other"}.}

\item{group_order}{Optional: A character vector specifying the desired
sort order of the display labels (values from \code{group_labels} or
\code{default_label}). Labels present in the data but not in
\code{group_order} are appended alphabetically after the specified ones.
If provided, must be a character vector with unique, non-missing values.
If \code{NULL} (default), groups are sorted alphabetically by label.}

\item{pandoc_path}{Optional: Path to the Pandoc executable. If \code{NULL} (default),
Pandoc is expected to be in the system's PATH. If provided, must be a
single, non-empty string (existence is checked later).}

\item{author_highlight_markup}{Typst markup string used for highlighting the
\code{author_name}. Must contain the placeholder \\%s exactly once, which
will be replaced by the \code{author_name}. Must be a single, non-empty string.
Defaults to \code{"#strong[\%s]"}.}

\item{typst_func_name}{Name of the Typst function that will receive the
publication list data (the array of label/item pairs). The output
string will be formatted like \verb{#function_name(( (label:"...", item:"..."), ... ))}.
Must be a single, non-empty string (without the leading '#').
Defaults to \code{"publication-list"}.}
}
\value{
A single character string containing a Typst code block (\verb{```\{=typst\} ... ```})
with the formatted publication list, ready to be included in a Quarto
document via \code{output: asis}. Returns an empty Typst array block if
no processable entries are found after validation and processing.
}
\description{
Reads a .bib file, uses Pandoc with a CSL file to generate JSON output
containing formatted citations and metadata. Extracts structural information,
groups and sorts entries (optionally by custom group order), highlights an
author, and returns the result as a Typst code block suitable for a
two-column layout (label + formatted item). Argument validation is performed
using assertions from the \code{checkmate} package via an internal helper function.
}
\examples{
\dontrun{
# --- Setup ---
# Create dummy bib file
bib_content <- c(
  "@article{Author2023Title,
            author={First Author and Second Author},
            title={A Title},
            year={2023},
            journal={Some Journal}
            }",
  "@inproceedings{Author2022Conf,
                  author={Second Author},
                  title={Conf Paper},
                  year={2022},
                  booktitle={Proc. Conf}
                  }",
  "@misc{AuthorNodatePrep,
         author={First Author},
         title={In Prep},
         howpublished={In Review}
         }",
  "@book{Third2021Book,
         author={Third Person},
         title={A Book},
         year={2021},
         publisher={Pub Co}
         }"
)
bib_file <- tempfile(fileext = ".bib")
writeLines(bib_content, bib_file)

# Create dummy CSL (or use a real one) - e.g., download apa.csl
# For this example, create a minimal dummy file if needed
csl_content <- '<?xml version="1.0" encoding="utf-8"?>
<style xmlns="http://purl.org/net/xbiblio/csl" class="in-text" version="1.0">
  <info>
    <title>Minimal Example</title>
    <id>minimal-example</id>
    <link href="http://example.com" rel="self"/>
    <updated>2024-01-01T00:00:00+00:00</updated>
  </info>
  <bibliography>
    <layout>
      <text variable="title"/>
    </layout>
  </bibliography>
</style>'
csl_file <- tempfile(fileext = ".csl")
writeLines(csl_content, csl_file)

author_to_highlight <- "First Author"

# --- Basic Usage ---
# Assumes pandoc is in PATH
try(
  {
    typst_out_basic <- create_publication_list(
      bib_file = bib_file,
      author_name = author_to_highlight,
      csl_file = csl_file
    )
    cat(typst_out_basic)
  },
  silent = TRUE
)

# --- Custom Grouping and Order ---
custom_labels <- c(article = "Peer-Reviewed", book = "Monographs", misc = "Other")
custom_order <- c("Peer-Reviewed", "Monographs", "Conference Items", "Other")
# Note: "Conference Items" comes from default_label mapping for inproceedings

try(
  {
    typst_out_custom <- create_publication_list(
      bib_file = bib_file,
      author_name = author_to_highlight,
      csl_file = csl_file,
      group_labels = custom_labels,
      default_label = "Conference Items", # Assign remaining types here
      group_order = custom_order,
      author_highlight_markup = "#emph[\%s]"
    )
    cat(typst_out_custom)
  },
  silent = TRUE
)

# --- Invalid Input Example (should error) ---
try(
  {
    create_publication_list(
      bib_file = "nonexistent.bib", # File doesn't exist
      author_name = author_to_highlight,
      csl_file = csl_file
    )
  },
  error = function(e) {
    print(paste("Successfully caught expected error:", e$message))
  }
)

# --- Cleanup ---
unlink(bib_file)
unlink(csl_file)
}
}
